{"version":3,"file":"link.min.js","sources":["../src/link.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n// The max line length is set very low for nested code, so disable.\n/* eslint-disable max-len */\n\n/**\n * Link helper for Tiny Link plugin.\n *\n * @module      tiny_medial/link\n * @copyright   2023 Tim Williams, Streaming Ltd <tim@medial.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport Templates from 'core/templates';\nimport Pending from 'core/pending';\nimport {getUserId, getOauthConsumerKey, getCourse, getPlayerSizeUrl, getBaseurl, getPlaceholder, getLinkOnly, getViewLaunchType} from './options';\n//import Selectors from 'tiny_medial/selectors';\n\n/**\n * Handle insertion of a new medial video\n *\n * @param {int} preid\n * @param {String} inserttype\n * @param {TinyMCE} editor\n */\nexport const setLink = (preid, inserttype, editor) => {\n\n    var xmlDoc = new XMLHttpRequest();\n    var params = \"resource_link_id=\" + preid + \"&user_id=\" + getUserId(editor) +\n        \"&oauth_consumer_key=\" + getOauthConsumerKey(editor) +\n        \"&context_id=\"+ getCourse(editor) +\n        \"&include_height=Y\";\n\n    xmlDoc.onload = (response) => {\n        const pendingPromise = new Pending('tiny_medial/setLink');\n        checkResponse(preid, inserttype, editor, response).then(pendingPromise.resolve);\n    };\n    window.console.log(getPlayerSizeUrl(editor));\n    xmlDoc.open(\"POST\", getPlayerSizeUrl(editor) , true);\n    xmlDoc.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n    xmlDoc.send(params);\n};\n\n/**\n * Next step adding the tag to the editor\n *\n * @param {int} preid\n * @param {String} inserttype\n * @param {TinyMCE} editor\n * @param {Object} response\n */\nconst checkResponse = async(preid, inserttype, editor, response) => {\n    if (response.target.status < 200 && response.target.status >= 400) {\n        return;\n    }\n\n    var resp = response.target.responseText.split(':');\n\n    var audioonly = 0;\n    if (resp.length == 3 && resp[2] == 'Y') {\n        audioonly = 1;\n    }\n    window.console.log(\"audioonly=\"+audioonly);\n\n    var template = \"\";\n    if (getLinkOnly(editor) || inserttype != 'iframe') {\n        template = 'tiny_medial/link';\n    } else {\n        template = 'tiny_medial/iframe';\n    }\n\n    setMedialLink(preid, inserttype, editor, audioonly, getViewLaunchType(editor), template);\n};\n\n/**\n * Final step adding the tag to the editor\n *\n * @param {int} preid\n * @param {String} inserttype\n * @param {TinyMCE} editor\n * @param {int} audioonly\n * @param {int} launchtype\n * @param {String} template\n */\nexport const setMedialLink = async(preid, inserttype, editor, audioonly, launchtype, template) => {\n\n    var context = {url :\n        getEmbedUrl(editor) + \"?type=\"+launchtype+\"&responsive=1&medialembed=\"+inserttype+\"&audioonly=\"+audioonly+\"&l=\" + preid\n    };\n\n    if (audioonly == 1) {\n        context.audioonly = true;\n    }\n\n    const {html} = await Templates.renderForPromise(template, context);\n    window.console.log(html);\n    editor.insertContent(html);\n};\n\n/**\n * Gets the base URL either with a placeholder of path at the front.\n * @param {TinyMCE} editor\n * @return url\n */\nconst getEmbedUrl = (editor) => {\n    if (getPlaceholder(editor) == 1) {\n        return \"{{{medial_launch_base}}}/mod/helixmedia/launch.php\";\n    } else {\n        return getBaseurl(editor) + \"/mod/helixmedia/launch.php\";\n    }\n};\n\n\n"],"names":["preid","inserttype","editor","xmlDoc","XMLHttpRequest","params","onload","response","pendingPromise","Pending","checkResponse","then","resolve","window","console","log","open","setRequestHeader","send","async","target","status","resp","responseText","split","audioonly","length","template","setMedialLink","launchtype","context","url","getEmbedUrl","html","Templates","renderForPromise","insertContent"],"mappings":";;;;;;;qNAsCuB,CAACA,MAAOC,WAAYC,cAEnCC,OAAS,IAAIC,eACbC,OAAS,oBAAsBL,MAAQ,aAAc,sBAAUE,QAC/D,wBAAyB,gCAAoBA,QAC7C,gBAAgB,sBAAUA,QAC1B,oBAEJC,OAAOG,OAAUC,iBACPC,eAAiB,IAAIC,iBAAQ,uBACnCC,cAAcV,MAAOC,WAAYC,OAAQK,UAAUI,KAAKH,eAAeI,UAE3EC,OAAOC,QAAQC,KAAI,6BAAiBb,SACpCC,OAAOa,KAAK,QAAQ,6BAAiBd,SAAU,GAC/CC,OAAOc,iBAAiB,eAAe,qCACvCd,OAAOe,KAAKb,eAWVK,cAAgBS,MAAMnB,MAAOC,WAAYC,OAAQK,iBAC/CA,SAASa,OAAOC,OAAS,KAAOd,SAASa,OAAOC,QAAU,UAI1DC,KAAOf,SAASa,OAAOG,aAAaC,MAAM,KAE1CC,UAAY,EACG,GAAfH,KAAKI,QAA0B,KAAXJ,KAAK,KACzBG,UAAY,GAEhBZ,OAAOC,QAAQC,IAAI,aAAaU,eAE5BE,SAAW,GAEXA,UADA,wBAAYzB,SAAyB,UAAdD,WACZ,mBAEA,qBAGf2B,cAAc5B,MAAOC,WAAYC,OAAQuB,WAAW,8BAAkBvB,QAASyB,YAatEC,cAAgBT,MAAMnB,MAAOC,WAAYC,OAAQuB,UAAWI,WAAYF,gBAE7EG,QAAU,CAACC,IACXC,YAAY9B,QAAU,SAAS2B,WAAW,6BAA6B5B,WAAW,cAAcwB,UAAU,MAAQzB,OAGrG,GAAbyB,YACAK,QAAQL,WAAY,SAGlBQ,KAACA,YAAcC,mBAAUC,iBAAiBR,SAAUG,SAC1DjB,OAAOC,QAAQC,IAAIkB,MACnB/B,OAAOkC,cAAcH,kDAQnBD,YAAe9B,QACa,IAA1B,2BAAeA,QACR,sDAEA,uBAAWA,QAAU"}