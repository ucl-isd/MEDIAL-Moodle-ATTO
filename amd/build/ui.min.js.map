{"version":3,"file":"ui.min.js","sources":["../src/ui.js"],"sourcesContent":["// This file is part of Moodle - http://moodle.org/\n//\n// Moodle is free software: you can redistribute it and/or modify\n// it under the terms of the GNU General Public License as published by\n// the Free Software Foundation, either version 3 of the License, or\n// (at your option) any later version.\n//\n// Moodle is distributed in the hope that it will be useful,\n// but WITHOUT ANY WARRANTY; without even the implied warranty of\n// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\n// GNU General Public License for more details.\n//\n// You should have received a copy of the GNU General Public License\n// along with Moodle.  If not, see <http://www.gnu.org/licenses/>.\n\n// The max line length is set very low for nested code, so disable.\n/* eslint-disable max-len */\n/**\n * Tiny Medial UI.\n *\n * @module      tiny_medial/ui\n * @copyright   2023 Tim Williams, Streaming Ltd <tim@medial.com>\n * @license     http://www.gnu.org/copyleft/gpl.html GNU GPL v3 or later\n */\n\nimport ModalFactory from 'core/modal_factory';\nimport ModalEvents from 'core/modal_events';\nimport MedialModal from 'tiny_medial/modal';\nimport {getBaseurl, getLtiurl, getLaunchType, getLibLaunchType, getModType, getUserId, getOauthConsumerKey, getStatusUrl, getHideInsert, getEmbedOpt, getInsertDelay} from './options';\n//import {getPermissions} from \"tiny_link/options\";\nimport {setLink, setMedialLink} from \"tiny_medial/link\";\nimport Selectors from 'tiny_medial/selectors';\n\nlet preid = -1;\nlet gotIn = false;\n\n// TMW eslint insists that interval is unused, despite the fact that it is used in the code below, so disable the check.\n// eslint-disable-next-line no-unused-vars\nlet interval = null;\n\nlet ed = null;\nlet modalPromises = false;\n\n/**\n * Handle action.\n *\n * @param {TinyMCE} editor\n * @param {boolean} unlink\n */\nexport const handleAction = (editor, unlink = false) => {\n    if (!unlink) {\n        displayDialogue(editor);\n    } else {\n       // unSetLink(editor);\n    }\n};\n\n/**\n * Display the link dialogue.\n *\n * @param {TinyMCE} editor\n * @returns {Promise<void>}\n */\nconst displayDialogue = async(editor) => {\n    ed = editor;\n\n    modalPromises = await ModalFactory.create({\n        type: MedialModal.TYPE,\n        templateContext: getTemplateContext(editor),\n        large: true,\n    });\n\n    modalPromises.show();\n    const $root = await modalPromises.getRoot();\n    const root = $root[0];\n    //const currentForm = root.querySelector('form');\n\n    $root.on(ModalEvents.hidden, () => {\n        window.removeEventListener(\"message\", receiveMessage);\n        modalPromises.destroy();\n        modalPromises = false;\n    });\n\n    $root.on(ModalEvents.shown, () => {\n/* eslint-disable no-console */\n    console.log(\"add listener\");\n        window.addEventListener(\"message\", receiveMessage, false);\n/* eslint-enable no-console */\n    });\n\n    root.addEventListener('click', (e) => {\n        const submitAction = e.target.closest(Selectors.actions.submit);\n        if (submitAction) {\n            e.preventDefault();\n            setLink(preid, getLinkType(editor), editor);\n            modalPromises.destroy();\n        }\n\n    });\n};\n\nconst getLinkType = (editor) => {\n    return document.getElementById('medial_insert_type_'+editor.id).value;\n};\n\n/**\n * Get template context.\n *\n * @param {TinyMCE} editor\n * @returns {Object}\n */\nconst getTemplateContext = (editor) => {\n    return Object.assign({}, {\n        elementid: editor.id,\n        edit: true,\n        medialurl: getLtiurl(editor),\n        launchurl: getBaseurl(editor)+\"/mod/helixmedia/launch.php?type=\"+getLaunchType(editor)+\"&modtype=\"+getModType(editor),\n        hideinsert: getHideInsert(editor),\n        embedopt: getEmbedOpt(editor)\n    }, {});\n};\n\n/**\n* Listener for the message that tells us the resource link ID\n* @param {Event} event The message event object\n*/\nexport const receiveMessage = (event) => {\n/* eslint-disable no-console */\n    console.log(\"recieveMessage\");\n    console.log(event.data);\n    console.log(typeof event.data);\n\n    if (typeof event.data === 'string') {\n\n\n        var i = event.data.indexOf(\"preid_\");\n    console.log(\"i=\"+i);\n        if (i == 0) {\nconsole.log(\"start checkStatus\");\n            preid = event.data.substring(6);\n            interval = setTimeout(checkStatus, 5000);\n        }\n    }\n/* eslint-enable no-console */\n};\n\n/**\n * Monitors the status of the video selection on the HML server\n * Note, this doesn't use setInterval so that this check will quickly die if there is a problem\n * rather than continuing for ever. The check is a convenience and isn't critical to the operation\n * of the plugin.\n**/\n\nconst checkStatus = () => {\n    var xmlDoc = new XMLHttpRequest();\n    var params = \"resource_link_id=\" + preid + \"&user_id=\" + getUserId(ed) +\n        \"&oauth_consumer_key=\" + getOauthConsumerKey(ed);\n\n    xmlDoc.onload = (response) => {\n\n/* eslint-disable no-console */\n    console.log(\"status\");\n    console.log(response);\n/* eslint-enable no-console */\n\n        if (!modalPromises) {\n            gotIn = false;\n            return;\n        }\n\n        if (response.target.status < 200 && response.target.status >= 400) {\n            // Something went wrong. Show the user the insert button just in case and give up on the monitoring.\n            setInsertDisplay('inline');\n            return;\n        }\n\n        if (response.target.responseText == \"IN\") {\n            gotIn = true;\n            setInsertDisplay('none');\n        }\n\n        if (response.target.responseText == \"OUT\" && gotIn == true) {\n            gotIn = false;\n            if (!getHideInsert(ed)) {\n                setInsertDisplay('inline');\n            }\n\n            var delay = getInsertDelay(ed);\n            if (delay > -1) {\n                if (delay == 0) {\n                    setLink(preid, getLinkType(ed), ed);\n                    modalPromises.destroy();\n                } else {\n                    setTimeout( () => { setLink(preid, getLinkType(ed), ed); modalPromises.destroy();}, delay * 1000);\n                }\n            }\n        } else {\n            interval = setTimeout(checkStatus, 2000);\n        }\n    };\n\n    xmlDoc.open(\"POST\", getStatusUrl(ed) , true);\n    xmlDoc.setRequestHeader(\"Content-type\",\"application/x-www-form-urlencoded\");\n    xmlDoc.send(params);\n};\n\nconst setInsertDisplay = (state) => {\n    var e = document.getElementById('mod_helixmedia_launchframebutton_'+ed.id);\n    if (typeof e != 'undefined') {\n        e.style.display = state;\n    }\n};\n\n/**\n * Handle insertion of a new medial video\n *\n * @param {TinyMCE} editor\n */\nexport const insertLibLink = (editor) => {\nwindow.console.log('insertLibLink');\nwindow.console.log(editor);\n    setMedialLink(0, 'library', editor, 0, getLibLaunchType(editor), 'tiny_medial/library');\n};\n"],"names":["preid","gotIn","interval","ed","modalPromises","editor","unlink","displayDialogue","async","ModalFactory","create","type","MedialModal","TYPE","templateContext","getTemplateContext","large","show","$root","getRoot","root","on","ModalEvents","hidden","window","removeEventListener","receiveMessage","destroy","shown","console","log","addEventListener","e","target","closest","Selectors","actions","submit","preventDefault","getLinkType","document","getElementById","id","value","Object","assign","elementid","edit","medialurl","launchurl","hideinsert","embedopt","event","data","i","indexOf","substring","setTimeout","checkStatus","xmlDoc","XMLHttpRequest","params","onload","response","status","setInsertDisplay","responseText","delay","open","setRequestHeader","send","state","style","display"],"mappings":";;;;;;;2UAiCIA,OAAS,EACTC,OAAQ,EAIRC,SAAW,KAEXC,GAAK,KACLC,eAAgB,wBAQQ,SAACC,YAAQC,+DAC5BA,QACDC,gBAAgBF,eAYlBE,gBAAkBC,MAAAA,SACpBL,GAAKE,OAELD,oBAAsBK,uBAAaC,OAAO,CACtCC,KAAMC,eAAYC,KAClBC,gBAAiBC,mBAAmBV,QACpCW,OAAO,IAGXZ,cAAca,aACRC,YAAcd,cAAce,UAC5BC,KAAOF,MAAM,GAGnBA,MAAMG,GAAGC,sBAAYC,QAAQ,KACzBC,OAAOC,oBAAoB,UAAWC,gBACtCtB,cAAcuB,UACdvB,eAAgB,KAGpBc,MAAMG,GAAGC,sBAAYM,OAAO,KAE5BC,QAAQC,IAAI,gBACRN,OAAOO,iBAAiB,UAAWL,gBAAgB,MAIvDN,KAAKW,iBAAiB,SAAUC,IACPA,EAAEC,OAAOC,QAAQC,mBAAUC,QAAQC,UAEpDL,EAAEM,mCACMtC,MAAOuC,YAAYlC,QAASA,QACpCD,cAAcuB,eAMpBY,YAAelC,QACVmC,SAASC,eAAe,sBAAsBpC,OAAOqC,IAAIC,MAS9D5B,mBAAsBV,QACjBuC,OAAOC,OAAO,GAAI,CACrBC,UAAWzC,OAAOqC,GAClBK,MAAM,EACNC,WAAW,sBAAU3C,QACrB4C,WAAW,uBAAW5C,QAAQ,oCAAmC,0BAAcA,QAAQ,aAAY,uBAAWA,QAC9G6C,YAAY,0BAAc7C,QAC1B8C,UAAU,wBAAY9C,SACvB,IAOMqB,eAAkB0B,WAE3BvB,QAAQC,IAAI,kBACZD,QAAQC,IAAIsB,MAAMC,MAClBxB,QAAQC,WAAWsB,MAAMC,MAEC,iBAAfD,MAAMC,KAAmB,KAG5BC,EAAIF,MAAMC,KAAKE,QAAQ,UAC/B1B,QAAQC,IAAI,KAAKwB,GACJ,GAALA,IACZzB,QAAQC,IAAI,qBACA9B,MAAQoD,MAAMC,KAAKG,UAAU,GAC7BtD,SAAWuD,WAAWC,YAAa,qDAazCA,YAAc,SACZC,OAAS,IAAIC,eACbC,OAAS,oBAAsB7D,MAAQ,aAAc,sBAAUG,IAC/D,wBAAyB,gCAAoBA,IAEjDwD,OAAOG,OAAUC,cAGjBlC,QAAQC,IAAI,UACZD,QAAQC,IAAIiC,UAGH3D,iBAKD2D,SAAS9B,OAAO+B,OAAS,KAAOD,SAAS9B,OAAO+B,QAAU,IAE1DC,iBAAiB,kBAIe,MAAhCF,SAAS9B,OAAOiC,eAChBjE,OAAQ,EACRgE,iBAAiB,SAGe,OAAhCF,SAAS9B,OAAOiC,cAAkC,GAATjE,MAAe,CACxDA,OAAQ,GACH,0BAAcE,KACf8D,iBAAiB,cAGjBE,OAAQ,2BAAehE,IACvBgE,OAAS,IACI,GAATA,yBACQnE,MAAOuC,YAAYpC,IAAKA,IAChCC,cAAcuB,WAEd8B,YAAY,uBAAgBzD,MAAOuC,YAAYpC,IAAKA,IAAKC,cAAcuB,YAAqB,IAARwC,aAI5FjE,SAAWuD,WAAWC,YAAa,UA/BnCzD,OAAQ,GAmChB0D,OAAOS,KAAK,QAAQ,yBAAajE,KAAM,GACvCwD,OAAOU,iBAAiB,eAAe,qCACvCV,OAAOW,KAAKT,SAGVI,iBAAoBM,YAClBvC,EAAIQ,SAASC,eAAe,oCAAoCtC,GAAGuC,SACvD,IAALV,IACPA,EAAEwC,MAAMC,QAAUF,+BASIlE,SAC9BmB,OAAOK,QAAQC,IAAI,iBACnBN,OAAOK,QAAQC,IAAIzB,gCACD,EAAG,UAAWA,OAAQ,GAAG,6BAAiBA,QAAS"}